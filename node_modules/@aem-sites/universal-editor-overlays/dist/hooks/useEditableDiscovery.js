"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEditableDiscovery = void 0;

var _react = require("react");

var _useDebounce = require("use-debounce");

var _useMutationObserver = require("./useMutationObserver");

var _useWindowSize2 = require("./useWindowSize");

var _constants = require("../constants");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var discover = function discover(callback, element) {
  var _element$documentElem = element.documentElement,
      x = _element$documentElem.scrollLeft,
      y = _element$documentElem.scrollTop;
  var editables = element.querySelectorAll(_constants.EDITABLE_SELECTOR) || [];
  var result = {
    editables: [],
    offset: {
      x: x,
      y: y
    }
  };
  editables.forEach(function (item) {
    var entry = {
      ref: item.getAttribute(_constants.EDITABLE_ATTRIBUTE) || "",
      rect: item.getBoundingClientRect()
    };
    result.editables.push(entry);
  });
  callback(result);
  return result;
};

var useEditableDiscovery = function useEditableDiscovery() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.EDITABLE_DISCOVERY_DEFAULT_OPTIONS,
      element = _ref.element;

  var _useState = (0, _react.useState)({
    editables: [],
    offset: {
      x: 0,
      y: 0
    }
  }),
      _useState2 = _slicedToArray(_useState, 2),
      editables = _useState2[0],
      setEditables = _useState2[1];

  var _useWindowSize = (0, _useWindowSize2.useWindowSize)(),
      windowSize = _useWindowSize.windowSize;

  var callback = (0, _useDebounce.useDebouncedCallback)(function () {
    discover(setEditables, element);
  }, _constants.DISCOVERY_DEBOUNCE_MS); // discover when: window is resized

  (0, _react.useLayoutEffect)(function () {
    return callback();
  }, [callback, windowSize]); // discover when: content mutation observer is triggered

  (0, _useMutationObserver.useMutationObserver)({
    element: element,
    callback: callback
  });
  return {
    editables: editables
  };
};

exports.useEditableDiscovery = useEditableDiscovery;
//# sourceMappingURL=useEditableDiscovery.js.map